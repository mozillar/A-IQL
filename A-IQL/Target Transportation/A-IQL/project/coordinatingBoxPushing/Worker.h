#ifndef WORKER_H
#define WORKER_H
#include <string>
#include "Strategy.h"
#include "State.h"
using namespace std;
//robot, worker, agent are the same stuff in this program.
class Worker {

public:
	//function members
	Worker();
	int GetAction() const;
	void SetAction(int formal_action);
	double GetInsReward() const;  
	void SetInsReward(double formal_ins_reward);
	double GetAccReward() const;
    void SetAccReward(double formal_acc_reward);
	void Reset();

	double GetRand();

	double GetX() const;
	void SetX(double formal_x);
	double GetY() const;
	void SetY(double formal_y);
	double GetPreX() const;
	void SetPreX(double formal_pre_x);
	double GetPreY() const;
	void SetPreY(double formal_pre_y);

	double GetCurX() const;
	void SetCurX(double formal_cur_x);
	double GetCurY() const;
	void SetCurY(double formal_cur_y);

	int GetGrasp() const;
	void SetGrasp(int formal_grasp);
	int GetPreGrasp() const;
	void SetPreGrasp(int formal_pre_grasp);
	int GetCurGrasp() const;
	void SetCurGrasp(int formal_cur_grasp);

	void GetState(State & formal_state);
	void SetState(State formal_state);
	int GetStateIndex() const;
	void SetStateIndex(int formal_state_index);
	int GetPreStateIndex() const;
	void SetPreStateIndex(int formal_pre_state_index);
	int GetCurStateIndex() const;
	void SetCurStateIndex(int formal_cur_state_index);


	//data_member
    static const int FREE = 0;
	static const int LEFT_GRASP = 1;
	static const int RIGHT_GRASP = 2;
	static const int GRASP_COUNT = 3;
    Strategy* p_strategy; // When used, it can only be generated by using the keyword -- new, automatically freeing memory in the destructor of the derived class.
	
	
private:
	//data members
	double x;
	double y;
	double pre_x;                // x in s
	double pre_y;                // y in s
	double cur_x;                // x in s'
	double cur_y;                // x in s'
	int grasp;
	int pre_grasp;               //3 possible values £ºFree¡¢LEFT_GRASP¡¢RIGHT_GRASP
	int cur_grasp;
	int state_index;             
	int pre_state_index;         // index of s
	int cur_state_index;         // index of s'
	State state;
	int action;                  // the action of the robot
	double ins_reward;           // the immediate reward of the robot
	double acc_reward;		     // the accumulated reward of the robot
	static double all_ins_reward;// the immediate reward of both the robots
	static double all_acc_reward;// the accumulated reward of both the robots
	

};
#endif